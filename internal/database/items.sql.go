// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllItems = `-- name: GetAllItems :many
SELECT id, name, quantity, cost FROM items
`

func (q *Queries) GetAllItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getAllItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemById = `-- name: GetItemById :one
SELECT name, cost, quantity FROM items
WHERE id = $1
`

type GetItemByIdRow struct {
	Name     string
	Cost     int32
	Quantity int32
}

func (q *Queries) GetItemById(ctx context.Context, id uuid.UUID) (GetItemByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getItemById, id)
	var i GetItemByIdRow
	err := row.Scan(&i.Name, &i.Cost, &i.Quantity)
	return i, err
}

const insertItem = `-- name: InsertItem :one
INSERT INTO items(id, name, quantity, cost)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    $3
)
RETURNING id, name, quantity, cost
`

type InsertItemParams struct {
	Name     string
	Quantity int32
	Cost     int32
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, insertItem, arg.Name, arg.Quantity, arg.Cost)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Cost,
	)
	return i, err
}

const updateItemQuantity = `-- name: UpdateItemQuantity :exec
UPDATE items
SET quantity = $1
WHERE id = $2
`

type UpdateItemQuantityParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateItemQuantity, arg.Quantity, arg.ID)
	return err
}
