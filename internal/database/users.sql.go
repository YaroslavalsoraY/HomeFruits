// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateNewUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createNewUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, email, hashed_password FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT email FROM users
WHERE id = $1
`

func (q *Queries) GetUserEmail(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT hashed_password, id FROM users
WHERE email = $1
`

type GetUserPasswordRow struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) GetUserPassword(ctx context.Context, email string) (GetUserPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, email)
	var i GetUserPasswordRow
	err := row.Scan(&i.HashedPassword, &i.ID)
	return i, err
}

const isEmailExists = `-- name: IsEmailExists :one
SELECT EXISTS(
    SELECT id, created_at, updated_at, email, hashed_password FROM users
    WHERE email = $1
)
`

func (q *Queries) IsEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
