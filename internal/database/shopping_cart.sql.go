// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shopping_cart.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addItemInCart = `-- name: AddItemInCart :exec
INSERT INTO shopping_cart(item_id, user_id, quantity, cost, item_name)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type AddItemInCartParams struct {
	ItemID   uuid.UUID
	UserID   uuid.UUID
	Quantity int32
	Cost     int32
	ItemName string
}

func (q *Queries) AddItemInCart(ctx context.Context, arg AddItemInCartParams) error {
	_, err := q.db.ExecContext(ctx, addItemInCart,
		arg.ItemID,
		arg.UserID,
		arg.Quantity,
		arg.Cost,
		arg.ItemName,
	)
	return err
}

const deleteFromCart = `-- name: DeleteFromCart :one
DELETE FROM shopping_cart
WHERE item_id = $1 AND user_id = $2
RETURNING item_id, user_id, quantity, cost, item_name
`

type DeleteFromCartParams struct {
	ItemID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFromCart(ctx context.Context, arg DeleteFromCartParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, deleteFromCart, arg.ItemID, arg.UserID)
	var i ShoppingCart
	err := row.Scan(
		&i.ItemID,
		&i.UserID,
		&i.Quantity,
		&i.Cost,
		&i.ItemName,
	)
	return i, err
}

const getShoppingCart = `-- name: GetShoppingCart :many
SELECT item_id, user_id, quantity, cost, item_name FROM shopping_cart
WHERE user_id = $1
`

func (q *Queries) GetShoppingCart(ctx context.Context, userID uuid.UUID) ([]ShoppingCart, error) {
	rows, err := q.db.QueryContext(ctx, getShoppingCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingCart
	for rows.Next() {
		var i ShoppingCart
		if err := rows.Scan(
			&i.ItemID,
			&i.UserID,
			&i.Quantity,
			&i.Cost,
			&i.ItemName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
